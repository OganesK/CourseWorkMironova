### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  token: String
  user: User
}

input CreateUserInput {
  email: String!
  firstname: String!
  lastname: String!
  login: String!
  password: String!
}

type Mutation {
  signIn(data: SignInInput!): AuthPayload
  signUp(data: CreateUserInput!): AuthPayload
}

type Query {
  me: User
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

enum Role {
  administrator
  moderator
  resident
}

input SignInInput {
  login: String!
  password: String!
}

type User {
  bio: String
  email: String!
  firstname: String!
  id: Int!
  lastname: String!
  login: String!
  role: Role
}

input UserWhereUniqueInput {
  email: String
  id: Int
  login: String
}
